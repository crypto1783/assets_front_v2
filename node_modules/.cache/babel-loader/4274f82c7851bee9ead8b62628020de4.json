{"ast":null,"code":"var _jsxFileName = \"/Users/jianlexia/code/sub/ticket/front/kitties-hw/frontend/src/Events.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Feed, Grid, Button } from 'semantic-ui-react';\nimport { useSubstrate } from './substrate-lib'; // Events to be filtered from feed\n\nconst FILTERED_EVENTS = ['system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":0})', 'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":1})'];\n\nfunction Main(props) {\n  const {\n    api\n  } = useSubstrate();\n  const [eventFeed, setEventFeed] = useState([]);\n  useEffect(() => {\n    let unsub = null;\n\n    const allEvents = async () => {\n      unsub = await api.query.system.events(events => {\n        // loop through the Vec<EventRecord>\n        events.forEach(record => {\n          // extract the phase, event and the event types\n          const {\n            event,\n            phase\n          } = record;\n          const types = event.typeDef;\n          console.log(\"type = \", JSON.stringify(types)); // show what we are busy with\n\n          const eventName = `${event.section}:${event.method}:: (phase=${phase.toString()})`;\n          if (FILTERED_EVENTS.includes(eventName)) return; // loop through each of the parameters, displaying the type and data\n\n          const params = event.data.map((data, index) => `${types[index].type}: ${data.toString()}`);\n          setEventFeed(e => [{\n            icon: 'bell',\n            summary: `${eventName}-${e.length}`,\n            extraText: event.meta.documentation.join(', ').toString(),\n            content: params.join(', ')\n          }, ...e]);\n          debugger;\n        });\n      });\n    };\n\n    allEvents();\n    return () => unsub && unsub();\n  }, [api.query.system]);\n  const {\n    feedMaxHeight = 250\n  } = props;\n  return /*#__PURE__*/React.createElement(Grid.Column, {\n    width: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    style: {\n      float: 'left'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, \"Events\"), /*#__PURE__*/React.createElement(Button, {\n    basic: true,\n    circular: true,\n    size: \"mini\",\n    color: \"grey\",\n    floated: \"right\",\n    icon: \"erase\",\n    onClick: _ => setEventFeed([]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Feed, {\n    style: {\n      clear: 'both',\n      overflow: 'auto',\n      maxHeight: feedMaxHeight\n    },\n    events: eventFeed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default function Events(props) {\n  const {\n    api\n  } = useSubstrate();\n  return api.query && api.query.system && api.query.system.events ? /*#__PURE__*/React.createElement(Main, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  })) : null;\n}","map":{"version":3,"sources":["/Users/jianlexia/code/sub/ticket/front/kitties-hw/frontend/src/Events.js"],"names":["React","useEffect","useState","Feed","Grid","Button","useSubstrate","FILTERED_EVENTS","Main","props","api","eventFeed","setEventFeed","unsub","allEvents","query","system","events","forEach","record","event","phase","types","typeDef","console","log","JSON","stringify","eventName","section","method","toString","includes","params","data","map","index","type","e","icon","summary","length","extraText","meta","documentation","join","content","feedMaxHeight","float","_","clear","overflow","maxHeight","Events"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Feed, Grid, Button } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\n// Events to be filtered from feed\nconst FILTERED_EVENTS = [\n  'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":0})',\n  'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":1})'\n];\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [eventFeed, setEventFeed] = useState([]);\n\n  useEffect(() => {\n    let unsub = null;\n    const allEvents = async () => {\n      unsub = await api.query.system.events(events => {\n        // loop through the Vec<EventRecord>\n        events.forEach(record => {\n          // extract the phase, event and the event types\n          const { event, phase } = record;\n          const types = event.typeDef;\n\n          console.log(\"type = \",JSON.stringify(types));\n          \n\n          // show what we are busy with\n          const eventName = `${event.section}:${\n            event.method\n          }:: (phase=${phase.toString()})`;\n          \n\n          if (FILTERED_EVENTS.includes(eventName)) return;\n\n          // loop through each of the parameters, displaying the type and data\n          const params = event.data.map(\n            (data, index) => `${types[index].type}: ${data.toString()}`\n          );\n\n\n          setEventFeed(e => [{\n            icon: 'bell',\n            summary: `${eventName}-${e.length}`,\n            extraText: event.meta.documentation.join(', ').toString(),\n            content: params.join(', ')\n          }, ...e]);\n          debugger;\n        \n\n          \n\n        });\n      });\n    };\n\n    allEvents();\n    return () => unsub && unsub();\n  }, [api.query.system]);\n\n  const { feedMaxHeight = 250 } = props;\n\n  return (\n    <Grid.Column width={8}>\n      <h1 style={{ float: 'left' }}>Events</h1>\n      <Button\n        basic circular\n        size='mini'\n        color='grey'\n        floated='right'\n        icon='erase'\n        onClick={ _ => setEventFeed([]) }\n      />\n      <Feed style={{ clear: 'both', overflow: 'auto', maxHeight: feedMaxHeight }} events={eventFeed} />\n    </Grid.Column>\n  );\n}\n\nexport default function Events (props) {\n  const { api } = useSubstrate();\n  return api.query && api.query.system && api.query.system.events ? (\n    <Main {...props} />\n  ) : null;\n}\n"]},"metadata":{},"sourceType":"module"}